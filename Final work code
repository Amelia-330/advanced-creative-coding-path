<!DOCTYPE html>
<html>
<head>
   <script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
	<style>
		body {
			margin: 0px;
			background-color: #000000;
			overflow: hidden;
		}
	</style>
</head>
<body>
    
    <script src="js/three.min.js"></script>
	<script id="vertexShader" type="x-shader/x-vertex">
		void main() { gl_Position = vec4( position, 1.0 ); }
	</script>
	<script id="fragmentShader" type="x-shader/x-fragment">
		//============================================================
		//PUT YOUR GLSL CODE HERE
		//============================================================

          #ifdef GL_ES
          precision mediump float;
          #endif
          #define PI 3.14159265359
          uniform vec2 resolution;
          uniform vec2 mouse;
          uniform float time;

          mat2 rotate2d(float _angle){
                return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle));
          }

          
          vec2 brickTile(vec2 st, float _zoom){
               st *= _zoom;

          // Here is where the offset is happening
          st.x += step(1., mod(st.y,2.0)) * 0.5;

          return fract(st);
          }


          float random (in float x) {
                return fract(sin(x));
          }

          float random (in vec2 st) {
                return fract(sin(dot(st.xy, vec2(time*0.001,78.233)))
                 * 43758.5453123);
          }

          float randomSerie(float x, float freq, float t) {
    
                return smoothstep(0.5,random(floor(x*freq)-floor(t)),x);
                return step(0.5,random( floor(x*freq)-floor(t) ));
          }


          mat3 yuv2rgb = mat3(1.0, 0.2, 0.13983,
                    1.0, 1.39465, -0.58060,
                    1.0, 3.03211, 0.134)*mouse.x;


          void main() {
               vec2 st = gl_FragCoord.xy/resolution.xy;
               //st.x *= 0.8;
               
               //st -= vec2(0.5);    
               //st = rotate2d( sin(time)*PI ) * st;
               
               st /= vec2(2.15,0.65)/1.5;    
               st = brickTile(st,5.0);
   
    
          vec2 ipos = floor(st);  // get the integer coords
          vec2 fpos = fract(st);  // get the fractional coords

    
          //vec3 color = vec3(0.0);
          vec3 color = vec3(random( ipos ));
          //color = vec3(fpos,0.0);
    
          float cols = 5.;
          float freq = random(floor(time))+abs(atan(time)*0.1);
          float t = 300.+ time*(1.0-freq)*30.;

          if (fract(st.y*cols* 0.5) < 0.5){
          t *= -1.0;
          }

          freq += random(floor(st));

          float offset = 0.5;
          color = yuv2rgb*vec3(randomSerie(st.x, freq*10., t+offset),
                               randomSerie(st.x, freq*10., t),
                               randomSerie(st.x, freq*10., t-offset));

          gl_FragColor = vec4(1.0-color,1.0);
          } 
        
		//============================================================
		//END OF GLSL CODE
		//============================================================
	</script>
	<script>
		//change the resolution here. 1 is highest
		var pixel_resolution = 5;
		var container, stats;
		var camera, scene, renderer;
		var uniforms;
		init();
		animate();
		function init() {
			camera = new THREE.Camera();
			camera.position.z = 1;
			scene = new THREE.Scene();
			var geometry = new THREE.PlaneBufferGeometry(2, 2);
			uniforms = { time: { type: 'f', value: 1.0 }, resolution: { type: 'v2', value: new THREE.Vector2() }, mouse: {type: "v2", value: new THREE.Vector2()}};
			var material = new THREE.ShaderMaterial({ uniforms: uniforms, vertexShader: document.getElementById('vertexShader').textContent, fragmentShader: document.getElementById('fragmentShader').textContent });
			var mesh = new THREE.Mesh(geometry, material);
			scene.add(mesh);
			renderer = new THREE.WebGLRenderer();
			//Hack here to change resolution 
			renderer.setPixelRatio(window.devicePixelRatio / pixel_resolution);
			document.body.appendChild(renderer.domElement);
			onWindowResize();
			window.addEventListener('resize', onWindowResize, false);
	        window.addEventListener('mousemove', onMouseMove, false);

		}
		function onWindowResize(event) {
			renderer.setSize(window.innerWidth, window.innerHeight);
			uniforms.resolution.value.x = renderer.domElement.width;
			uniforms.resolution.value.y = renderer.domElement.height;

		}
		function animate() {
			requestAnimationFrame(animate);
			render();
		}
		function onMouseMove( event ) {
        	uniforms.mouse.value.x = 2 * ( event.clientX / window.innerWidth );
 	        uniforms.mouse.value.y = 2 * ( 1-(event.clientY) / window.innerHeight
 	        );
        }
		function render() {
			uniforms.time.value += 0.01;
			renderer.render(scene, camera);
		}
	</script>
</body>
</html>
